# names of hurricanes
names = ['Cuba I', 'San Felipe II Okeechobee', 'Bahamas', 'Cuba II', 'CubaBrownsville', 'Tampico', 'Labor Day', 'New England', 'Carol', 'Janet', 'Carla', 'Hattie', 'Beulah', 'Camille', 'Edith', 'Anita', 'David', 'Allen', 'Gilbert', 'Hugo', 'Andrew', 'Mitch', 'Isabel', 'Ivan', 'Emily', 'Katrina', 'Rita', 'Wilma', 'Dean', 'Felix', 'Matthew', 'Irma', 'Maria', 'Michael']

# months of hurricanes
months = ['October', 'September', 'September', 'November', 'August', 'September', 'September', 'September', 'September', 'September', 'September', 'October', 'September', 'August', 'September', 'September', 'August', 'August', 'September', 'September', 'August', 'October', 'September', 'September', 'July', 'August', 'September', 'October', 'August', 'September', 'October', 'September', 'September', 'October']

# years of hurricanes
years = [1924, 1928, 1932, 1932, 1933, 1933, 1935, 1938, 1953, 1955, 1961, 1961, 1967, 1969, 1971, 1977, 1979, 1980, 1988, 1989, 1992, 1998, 2003, 2004, 2005, 2005, 2005, 2005, 2007, 2007, 2016, 2017, 2017, 2018]

# maximum sustained winds (mph) of hurricanes
max_sustained_winds = [165, 160, 160, 175, 160, 160, 185, 160, 160, 175, 175, 160, 160, 175, 160, 175, 175, 190, 185, 160, 175, 180, 165, 165, 160, 175, 180, 185, 175, 175, 165, 180, 175, 160]

# areas affected by each hurricane
areas_affected = [['Central America', 'Mexico', 'Cuba', 'Florida', 'The Bahamas'], ['Lesser Antilles', 'The Bahamas', 'United States East Coast', 'Atlantic Canada'], ['The Bahamas', 'Northeastern United States'], ['Lesser Antilles', 'Jamaica', 'Cayman Islands', 'Cuba', 'The Bahamas', 'Bermuda'], ['The Bahamas', 'Cuba', 'Florida', 'Texas', 'Tamaulipas'], ['Jamaica', 'Yucatn Peninsula'], ['The Bahamas', 'Florida', 'Georgia', 'The Carolinas', 'Virginia'], ['Southeastern United States', 'Northeastern United States', 'Southwestern Quebec'], ['Bermuda', 'New England', 'Atlantic Canada'], ['Lesser Antilles', 'Central America'], ['Texas', 'Louisiana', 'Midwestern United States'], ['Central America'], ['The Caribbean', 'Mexico', 'Texas'], ['Cuba', 'United States Gulf Coast'], ['The Caribbean', 'Central America', 'Mexico', 'United States Gulf Coast'], ['Mexico'], ['The Caribbean', 'United States East coast'], ['The Caribbean', 'Yucatn Peninsula', 'Mexico', 'South Texas'], ['Jamaica', 'Venezuela', 'Central America', 'Hispaniola', 'Mexico'], ['The Caribbean', 'United States East Coast'], ['The Bahamas', 'Florida', 'United States Gulf Coast'], ['Central America', 'Yucatn Peninsula', 'South Florida'], ['Greater Antilles', 'Bahamas', 'Eastern United States', 'Ontario'], ['The Caribbean', 'Venezuela', 'United States Gulf Coast'], ['Windward Islands', 'Jamaica', 'Mexico', 'Texas'], ['Bahamas', 'United States Gulf Coast'], ['Cuba', 'United States Gulf Coast'], ['Greater Antilles', 'Central America', 'Florida'], ['The Caribbean', 'Central America'], ['Nicaragua', 'Honduras'], ['Antilles', 'Venezuela', 'Colombia', 'United States East Coast', 'Atlantic Canada'], ['Cape Verde', 'The Caribbean', 'British Virgin Islands', 'U.S. Virgin Islands', 'Cuba', 'Florida'], ['Lesser Antilles', 'Virgin Islands', 'Puerto Rico', 'Dominican Republic', 'Turks and Caicos Islands'], ['Central America', 'United States Gulf Coast (especially Florida Panhandle)']]

# damages (USD($)) of hurricanes
damages = ['Damages not recorded', '100M', 'Damages not recorded', '40M', '27.9M', '5M', 'Damages not recorded', '306M', '2M', '65.8M', '326M', '60.3M', '208M', '1.42B', '25.4M', 'Damages not recorded', '1.54B', '1.24B', '7.1B', '10B', '26.5B', '6.2B', '5.37B', '23.3B', '1.01B', '125B', '12B', '29.4B', '1.76B', '720M', '15.1B', '64.8B', '91.6B', '25.1B']

# deaths for each hurricane
deaths = [90,4000,16,3103,179,184,408,682,5,1023,43,319,688,259,37,11,2068,269,318,107,65,19325,51,124,17,1836,125,87,45,133,603,138,3057,74]

# 1


# Update Recorded Damages
conversion = {"M": 1000000,
              "B": 1000000000}

# test function by updating damages
def updated_damages(list):
  list1 = []
  for i in list:
    prefix = i[-1]
    if i == "Damages not recorded":
      list1.append(i)
    elif prefix in conversion:
      list1.append(float(i[:-1]) * conversion[prefix])
    else:
      list1.append(float(i))
  return list1
#updated_damages(damages)
orlist = list(zip(names,months,years,max_sustained_winds,areas_affected,damages,deaths))
# 2 
# Create a Table
def table(name):
  index = names.index(name)
  list = ["name","month","year","max_sustained_winds","areas_affected","damage","deaths"]
  dict = {key:val for key,val in zip(list,orlist[index])}
  return dict
# Create and view the hurricanes dictionary
hurr = table("Cuba I")
#print(hurr)
# 3
# Organizing by Year
def table_by_year(year):
  index = years.index(year)
  list = ["name","month","year","max_sustained_winds","areas_affected","damage","deaths"]
  dict = {key:val for key,val in zip(list,orlist[index])}
  return dict
# create a new dictionary of hurricanes with year and key
yearr = table_by_year(1932)
#print(yearr)

# 4
# Counting Damaged Areas
areas_count={}
def area_count(area_list):
  for i in area_list:
    for j in i:
      if j not in areas_count:
        areas_count[j] = 1
      else:
        areas_count[j] += 1
  return areas_count
countt = area_count(areas_affected)
print(countt)
      
# create dictionary of areas to store the number of hurricanes involved in


# 5 
# Calculating Maximum Hurricane Count

# find most frequently affected area and the number of hurricanes involved in
def most_affected(area_count_list):
  max_count = 0
  maximumArea = ""
  for area in area_count_list:
    if area_count_list[area] > max_count:
       max_count = area_count_list[area] 
       area = maximumArea
  print(f"{area} affected {max_count} times")

most_affected(countt)



# 6
# Calculating the Deadliest Hurricane

# find highest mortality hurricane and the number of deaths
name_death = {k:v for k,v in zip(names,deaths)}
def highest_deaths(hurricane_deaths):
  max_count = 0
  hurricane = ""
  for i in hurricane_deaths:
    if hurricane_deaths[i] > max_count:
      max_count = hurricane_deaths[i]
      hurricane = i
  print(f"{hurricane} hurricane has the highest deaths by {max_count}")

highest_deaths(name_death)
# 7
# Rating Hurricanes by Mortality
mortality_scale = {0: 0,
                   1: 100,
                   2: 500,
                   3: 1000,
                   4: 10000}


def mor_scale_hurricane(name_death):
  scale = {"1":[],"2":[],"3":[],"4":[],"5":[]}
  for i in name_death:
    if name_death[i]>0 and name_death[i]<100:
      scale["1"].append(i)
    elif name_death[i]>100 and name_death[i]<500:
      scale["2"].append(i)
    elif name_death[i]>500 and name_death[i]<1000:
     scale["3"].append(i)
    elif name_death[i]>1000 and name_death[i]<10000:
      scale["4"].append(i)
    else:
      scale["5"].append(i)
  return scale
scalee = mor_scale_hurricane(name_death)
print(scalee)

# categorize hurricanes in new dictionary with mortality severity as key


# 8 Calculating Hurricane Maximum Damage

# find highest damage inducing hurricane and its total cost
damages_up = updated_damages(damages)
hurricane_damage = {k:v for k,v in zip(names,damages_up)}
print(hurricane_damage)
def most_damage(hurricane_damage):
  max_damage = 0
  hurricane = ""
  for i in hurricane_damage:
    if hurricane_damage[i] == 'Damages not recorded':
      print("")
    elif hurricane_damage[i] > max_damage:
      max_damage = hurricane_damage[i]
      hurricane = i 
  print(f"hurricane {hurricane} did the most damages by {max_damage}$")

most_damage(hurricane_damage)
# 9
# Rating Hurricanes by Damage
damage_scale = {0: 0,
                1: 100000000,
                2: 1000000000,
                3: 10000000000,
                4: 50000000000}
def damage_scale_hurricane(hurricane_damage):
  d_scale = {"1":[],"2":[],"3":[],"4":[],"5":[]}
  for i in hurricane_damage:
    if hurricane_damage[i] == 'Damages not recorded':
      print("")
    elif hurricane_damage[i]<100000000:
      d_scale["1"].append(i)
    elif hurricane_damage[i]>100000000 and hurricane_damage[i]<1000000000:
      d_scale["2"].append(i)
    elif hurricane_damage[i]>1000000000 and hurricane_damage[i]<10000000000:
     d_scale["3"].append(i)
    elif hurricane_damage[i]>10000000000 and hurricane_damage[i]<50000000000:
      d_scale["4"].append(i)
    else:
      d_scale["5"].append(i)
  return d_scale
scalee1 = damage_scale_hurricane(hurricane_damage)
print(scalee1)
# categorize hurricanes in new dictionary with damage severity as key
