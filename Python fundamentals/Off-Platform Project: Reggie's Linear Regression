
# Write your get_y() function here
def get_y(m,b,x):
  y = (m*x) + b
  return y

#Each of the following should print True
print(get_y(1, 0, 7) == 7)
print(get_y(5, 10, 3) == 25)



# Write your calculate_error() function here
def calculate_error(m,b,point):
  x_point = point[0]
  y_point = point[1]
  y_value = get_y(m,b,x_point)
  distance = y_value - y_point
  return abs(distance)




# Uncomment each print() statement and check the output against the expected result

# this is a line that looks like y = x, so (3, 3) should lie on it. thus, error should be 0:
print(calculate_error(1, 0, (3, 3)))

# the point (3, 4) should be 1 unit away from the line y = x:
print(calculate_error(1, 0, (3, 4)))

# the point (3, 3) should be 1 unit away from the line y = x - 1:
print(calculate_error(1, -1, (3, 3)))

# the point (3, 3) should be 5 units away from the line y = -x + 1:
print(calculate_error(-1, 1, (3, 3)))



# Write your calculate_all_error() function here
def calculate_all_error(m,b,points):
  error = 0
  for point in points:
    error += calculate_error(m,b,point)
  return error




datapoints = [(1, 1), (3, 3), (5, 5), (-1, -1)]

# every point in this dataset lies upon y=x, so the total error should be zero:
print(calculate_all_error(1, 0, datapoints))

# every point in this dataset is 1 unit away from y = x + 1, so the total error should be 4:
print(calculate_all_error(1, 1, datapoints))

# every point in this dataset is 1 unit away from y = x - 1, so the total error should be 4:
print(calculate_all_error(1, -1, datapoints))

# the points in this dataset are 1, 5, 9, and 3 units away from y = -x + 1, respectively, so total error should be
# 1 + 5 + 9 + 3 = 18
print(calculate_all_error(-1, 1, datapoints))

# m:slope p:intercept with y-axis
# The range needed was form -10 to 10 with steps 0f 0.1
possible_ms = [numbers/10 for numbers in range(-100,101)] #the hint helped 
possible_bs = [numbers/10 for numbers in range(-200,201)]

# pair = list(zip(possible_ms,possible_bs))
# print(pair) I thought of this but it was wrong due to me making pairs limiting the possibilities and the answers ware not as task 13 implied so that helped finding out the problem


datapoints = [(1, 2), (2, 0), (3, 4), (4, 4), (5, 3)]
smallest_error = float("inf")
best_m = 0
best_b = 0

# Finding the best possible m and b to reduce the error

for m in possible_ms:
  for b in possible_bs:
    error = calculate_all_error(m,b,datapoints)
    if error < smallest_error:
      best_m = m
      best_b = b
      smallest_error = error

print(f"slope is {best_m}")
print(f"Intercept is {best_b}")
print(f"smallest error is {smallest_error}")
# Task 13
output =  get_y(best_m,best_b,x=6)
print(f"output is {output}m")








